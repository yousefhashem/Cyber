import math
import string

print("################################################################################################################# START Additive Cipher")
######################################################################################################################## START Additive Cipher
#### Encryption: C = (P + K) mod 26 #### Decryption: P = (C - K) mod 26


class AdditiveCipher:
    plaintext = "Yousef Hashem"
    shift = 2

    @staticmethod
    def encrypt(plaintext, shift):
        encrypted = ""

        for char in plaintext:
            if char.isalpha():
                ascii_offset = 65 if char.isupper() else 97
                encrypted_char = chr((ord(char) + shift - ascii_offset) % 26 + ascii_offset)
                encrypted += encrypted_char
            else:
                encrypted += char

        return encrypted

    ciphertext = encrypt(plaintext, shift)
    print("Additive Cipher encrypt Ciphertext: ", ciphertext)

    @staticmethod
    def decrypt(ciphertext, shift):
        decrypted = ""

        for char in ciphertext:
            if char.isalpha():
                ascii_offset = 65 if char.isupper() else 97
                decrypted_char = chr((ord(char) - shift - ascii_offset) % 26 + ascii_offset)
                decrypted += decrypted_char
            else:
                decrypted += char

        return decrypted

    plaintext = decrypt(ciphertext, shift)
    print("Additive Cipher decrypt Plaintext: ", plaintext)

    @staticmethod
    def break_cipher(ciphertext):
        for shift in range(1, 26):
            decrypted_text = AdditiveCipher.decrypt(ciphertext, shift)
            print("Attack Additive Cipher: " f"Shift {shift}: {decrypted_text}")


cipher_instance = AdditiveCipher()
cipher_instance.break_cipher("Aqwugh Jcujgo")
######################################################################################################################## END Additive Cipher
print("################################################################################################################# START Multiplicative Cipher")
######################################################################################################################## START Multiplicative Cipher


class MultiplicativeCipher:
    plaintext = "Yousef Hashem"
    key = 3

    @staticmethod
    def encrypt(plaintext, key):
        encrypted = ""

        for char in plaintext:
            if char.isalpha():
                ascii_offset = 65 if char.isupper() else 97
                encrypted_char = chr((ord(char) * key - ascii_offset) % 26 + ascii_offset)
                encrypted += encrypted_char
            else:
                encrypted += char

        return encrypted

    ciphertext = encrypt(plaintext, key)
    print("Multiplicative Cipher encrypt Ciphertext: ", ciphertext)

    @staticmethod
    def decrypt(ciphertext, key):
        if math.gcd(key, 26) != 1:
            return "Key not have inverse."

        decrypted = ""

        key_inverse = pow(key, -1, 26)

        for char in ciphertext:
            if char.isalpha():
                ascii_offset = 65 if char.isupper() else 97
                decrypted_char = chr((ord(char) * key_inverse - ascii_offset) % 26 + ascii_offset)
                decrypted += decrypted_char
            else:
                decrypted += char

        return decrypted

    plaintext = decrypt(ciphertext, key)
    print("Multiplicative Cipher decrypt Plaintext: ", plaintext)

    @staticmethod
    def break_cipher(ciphertext):
        for key in range(1, 26):
            if math.gcd(key, 26) == 1:
                decrypted_text = MultiplicativeCipher.decrypt(ciphertext, key)
                print(f"Key {key}: {decrypted_text}")


ciphertext_to_break = "Ucuoyb Vmohyw"
MultiplicativeCipher.break_cipher(ciphertext_to_break)
######################################################################################################################## END Multiplicative Cipher
print("################################################################################################################# START Affine Cipher")
######################################################################################################################## START Affine Cipher


def gcd(x, y):
    if y == 0:
        return x
    else:
        return gcd(y, x % y)


class AffineCipher:
    Alphabet = string.ascii_uppercase
    plaintext = ""

    @staticmethod
    def mod_inverse(a, m):
        for i in range(1, m):
            if (a * i) % m == 1:
                return i
        return None

    @staticmethod
    def encrypt(Alphabet, plaintext, k1, k2):
        ciphertext = ""
        for i in range(len(plaintext)):
            m = plaintext[i]
            index = Alphabet.find(m)
            c = ((k1 * index) + k2) % 26
            ciphertext += Alphabet[c]
        return ciphertext

    @staticmethod
    def decrypt(Alphabet, ciphertext, k1, k2):
        decrypted_text = ""
        mod_inverse_k1 = AffineCipher.mod_inverse(k1, 26)

        if mod_inverse_k1 is not None:
            for i in range(len(ciphertext)):
                c = ciphertext[i]
                index = Alphabet.find(c)
                m = (mod_inverse_k1 * (index - k2)) % 26
                decrypted_text += Alphabet[m]
            return decrypted_text
        else:
            return "Multiplicative key must be coprime with 26."

    @staticmethod
    def attack(ciphertext):
        for k1 in range(1, 26):
            if gcd(k1, 26) == 1:
                for k2 in range(26):
                    decrypted_text = AffineCipher.decrypt(AffineCipher.Alphabet, ciphertext, k1, k2)
                    print(f"Attempt (k1 = {k1}, k2 = {k2}): {decrypted_text}")


AffineCipher.plaintext = input("Enter text here: ").upper()
k2 = int(input("Enter additive key: "))
if k2 > 26:
    k2 %= 26

k1 = int(input("Enter multiplicative key: "))
while gcd(k1, 26) != 1:
    print("Multiplicative key must be coprime with 26.")
    k1 = int(input("Enter multiplicative key: "))

ciphertext = AffineCipher.encrypt(AffineCipher.Alphabet, AffineCipher.plaintext, k1, k2)
print("Affine Cipher Ciphertext:", ciphertext)

plaintext_decrypt = AffineCipher.decrypt(AffineCipher.Alphabet, ciphertext, k1, k2)
print("Affine Cipher Plaintext Text:", plaintext_decrypt)

print("Affine Attack:")
AffineCipher.attack(ciphertext)

######################################################################################################################## END Affine Cipher
print("################################################################################################################# START Vigeneer cipher")
######################################################################################################################## START Vigeneer cipher


class VigenereCipher:
    plaintext = "Yousef Hashem"
    key = "DELL"

    @staticmethod
    def encrypt(plaintext, key):
        ciphertext = ""
        key = key.upper()
        key_length = len(key)
        for i in range(len(plaintext)):
            char = plaintext[i]
            if char.isalpha():
                shift = ord(key[i % key_length]) - ord('A')
                encrypted_char = VigenereCipher.shift_char(char, shift)
                ciphertext += encrypted_char
            else:
                ciphertext += char
        return ciphertext

    @staticmethod
    def decrypt(ciphertext, key):
        decrypted_text = ""
        key = key.upper()
        key_length = len(key)
        for i in range(len(ciphertext)):
            char = ciphertext[i]
            if char.isalpha():
                shift = ord(key[i % key_length]) - ord('A')
                decrypted_char = VigenereCipher.shift_char(char, -shift)
                decrypted_text += decrypted_char
            else:
                decrypted_text += char
        return decrypted_text

    @staticmethod
    def shift_char(char, shift):
        ascii_offset = ord('A') if char.isupper() else ord('a')
        shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
        return shifted_char


ciphertext = VigenereCipher.encrypt(VigenereCipher.plaintext, VigenereCipher.key)
print("Vigeneer Cipher Ciphertext:", ciphertext)

decrypted_text = VigenereCipher.decrypt(ciphertext, VigenereCipher.key)
print("Vigeneer Cipher Decrypted Text:", decrypted_text)

######################################################################################################################## END Vigeneer Cipher
print("################################################################################################################# START S-DES")
######################################################################################################################## START S-DES


def permute(original, order):
    return [original[i - 1] for i in order]


def left_shift(key, shifts):
    return key[shifts:] + key[:shifts]


def generate_keys(key):
    initial_key_permutation = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
    permuted_key = permute(key, initial_key_permutation)

    left_half = permuted_key[:5]
    right_half = permuted_key[5:]

    subkeys = []
    for i in range(1, 4):
        left_half = left_shift(left_half, i)
        right_half = left_shift(right_half, i)
        subkey = permute(left_half + right_half, [6, 3, 7, 4, 8, 5, 10, 9])
        subkeys.append(subkey)

    return subkeys


def f_function(right_half, subkey):
    expansion_permutation = [4, 1, 2, 3, 2, 3, 4, 1]
    expanded_right = permute(right_half, expansion_permutation)

    xor_result = [int(expanded_right[i]) ^ int(subkey[i]) for i in range(8)]

    s_boxes = [
        [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]],
        [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]],
    ]

    s_box_output = []
    for i in range(2):
        row = int("".join(map(str, [xor_result[i * 4], xor_result[i * 4 + 3]])), 2)
        col = int("".join(map(str, xor_result[i * 4 + 1:i * 4 + 3])), 2)
        value = s_boxes[i][row][col]
        s_box_output += [int(bit) for bit in format(value, "02b")]

    straight_permutation = [2, 4, 3, 1, 4, 3, 2, 1]
    output = permute(s_box_output, straight_permutation)

    return output


def sdes_encrypt(plaintext, key):
    subkeys = generate_keys(key)

    initial_permutation_plaintext = [2, 6, 3, 1, 4, 8, 5, 7]
    plaintext_permuted = permute(plaintext, initial_permutation_plaintext)

    left_half = plaintext_permuted[:4]
    right_half = plaintext_permuted[4:]

    f_output = f_function(right_half, subkeys[0])
    xor_result = [int(left_half[i]) ^ int(f_output[i]) for i in range(4)]
    new_left_half = right_half
    new_right_half = [str(xor_result[i]) for i in range(4)]

    left_half, right_half = new_left_half, new_right_half

    f_output = f_function(right_half, subkeys[1])
    xor_result = [int(left_half[i]) ^ int(f_output[i]) for i in range(4)]
    new_left_half = right_half
    new_right_half = [str(xor_result[i]) for i in range(4)]

    inverse_permutation = [4, 1, 3, 5, 7, 2, 8, 6]
    ciphertext = permute(new_left_half + new_right_half, inverse_permutation)

    return ''.join(ciphertext)


def sdes_decrypt(ciphertext, key):
    subkeys = generate_keys(key)

    initial_permutation_ciphertext = [4, 1, 3, 5, 7, 2, 8, 6]
    ciphertext_permuted = permute(ciphertext, initial_permutation_ciphertext)

    left_half = ciphertext_permuted[:4]
    right_half = ciphertext_permuted[4:]

    f_output = f_function(right_half, subkeys[1])
    xor_result = [int(left_half[i]) ^ int(f_output[i]) for i in range(4)]
    new_left_half = right_half
    new_right_half = [str(xor_result[i]) for i in range(4)]

    left_half, right_half = new_left_half, new_right_half

    f_output = f_function(right_half, subkeys[0])
    xor_result = [int(left_half[i]) ^ int(f_output[i]) for i in range(4)]
    new_left_half = right_half
    new_right_half = [str(xor_result[i]) for i in range(4)]

    inverse_permutation = [2, 6, 3, 1, 4, 8, 5, 7]
    plaintext = permute(new_left_half + new_right_half, inverse_permutation)

    return ''.join(plaintext)

plaintext = "11011010"
key = "1010000010"

ciphertext = sdes_encrypt(plaintext, key)
print("S-DES Ciphertext:", ciphertext)

decrypted_text = sdes_decrypt(ciphertext, key)
print("S-DES Decrypted Text:", decrypted_text)

######################################################################################################################## END S-DES
print("################################################################################################################# START RSA")
######################################################################################################################## START RSA
#### C = M^e mod n
#### M = C^d mod n
#### Փ = (p - 1) * (q - 1)

p = 7
q = 19
n = p * q
phi = (p - 1) * (q - 1)
e = 29
d = 41


def encrypt(message, public_key):
    n, e = public_key
    cipher_text = pow(message, e, n)
    return cipher_text


def decrypt(cipher_text, private_key):
    n, d = private_key
    decrypted_text = pow(cipher_text, d, n)
    return decrypted_text


public_key = (n, e)
private_key = (n, d)
message = 60

print("Message:", message)

cipher_text = encrypt(message, public_key)
print("Encrypted Message:", cipher_text)

decrypted_text = decrypt(cipher_text, private_key)
print("Decrypted Message:", decrypted_text)

